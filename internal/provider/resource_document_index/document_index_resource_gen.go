// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_document_index

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DocumentIndexResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"copy_documents_from_index_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index",
				MarkdownDescription: "Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index",
			},
			"created": schema.StringAttribute{
				Computed: true,
			},
			"environment": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
				MarkdownDescription: "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"DEVELOPMENT",
						"STAGING",
						"PRODUCTION",
					),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Either the Document Index's ID or its unique name",
				MarkdownDescription: "Either the Document Index's ID or its unique name",
			},
			"label": schema.StringAttribute{
				Required:            true,
				Description:         "A human-readable label for the document index",
				MarkdownDescription: "A human-readable label for the document index",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 150),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "A name that uniquely identifies this index within its workspace",
				MarkdownDescription: "A name that uniquely identifies this index within its workspace",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 150),
				},
			},
			"status": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
				MarkdownDescription: "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ACTIVE",
						"ARCHIVED",
					),
				},
			},
		},
	}
}

type DocumentIndexModel struct {
	CopyDocumentsFromIndexId types.String `tfsdk:"copy_documents_from_index_id"`
	Created                  types.String `tfsdk:"created"`
	Environment              types.String `tfsdk:"environment"`
	Id                       types.String `tfsdk:"id"`
	Label                    types.String `tfsdk:"label"`
	Name                     types.String `tfsdk:"name"`
	Status                   types.String `tfsdk:"status"`
}
